name: levi-ci

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "README.md"
      - "**/*.md"
      - "docs/**"
      - "ops/grafana/**"
  pull_request:
    branches: [main, develop]

concurrency:
  group: levi-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.6.9 black==24.8.0 isort==5.13.2

      - name: Ruff (lint)
        run: ruff check backend/src backend/tests --exit-zero

      - name: Black (format check)
        run: black --check backend/src backend/tests --diff

      - name: isort (imports)
        run: isort --check-only backend/src backend/tests --diff

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests with coverage
        working-directory: backend
        env:
          PYTHONPATH: /home/runner/work/levibot/levibot/backend
        run: |
          pytest tests/test_automl_nightly.py \
                 tests/test_engine_smoke.py \
                 tests/test_manager_smoke.py \
                 tests/test_recovery_policy.py \
                 tests/test_ml_components.py \
                 tests/test_risk_manager.py \
                 -v --cov=src --cov-report=xml --cov-report=term-missing \
                 --maxfail=3 --tb=short -m "not slow"

      - name: Check coverage threshold (≥75%)
        run: |
          python3 << 'EOF'
          import xml.etree.ElementTree as ET
          import sys

          try:
              tree = ET.parse('backend/coverage.xml')
              root = tree.getroot()
              rate = float(root.get('line-rate', '0'))
              pct = rate * 100
              print(f"📊 Coverage: {pct:.2f}%")
              
              if pct >= 75:
                  print("✅ Coverage threshold met!")
                  sys.exit(0)
              else:
                  print(f"❌ Coverage below 75% threshold")
                  sys.exit(1)
          except Exception as e:
              print(f"⚠️  Could not parse coverage: {e}")
              sys.exit(0)  # Don't fail on parse errors
          EOF

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: backend/coverage.xml

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/levibot
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/app.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ghcr.io/${{ github.repository }}/levibot:${{ github.ref_name }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          ignore-unfixed: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Prepare deployment manifest
        run: |
          echo "IMAGE=ghcr.io/${{ github.repository }}/levibot:main-${{ github.sha }}" > deploy.env
          echo "VERSION=${{ github.sha }}" >> deploy.env
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> deploy.env

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: deploy.env

      # TODO: Add actual deployment step
      # Examples:
      # - SSH to server + docker-compose pull & up
      # - kubectl apply -f k8s/
      # - ArgoCD sync
      # - Terraform apply

      - name: Deployment placeholder
        run: |
          echo "🚀 Deployment step placeholder"
          echo "Add your deployment logic here:"
          echo "  - SSH to server"
          echo "  - kubectl apply"
          echo "  - ArgoCD sync"
          cat deploy.env
